cmake_minimum_required(VERSION 3.24)

project(VulkanCompute)
set(SOURCES src/main.cpp src/vkhelpers.cpp src/GPEsim.cpp)
add_executable(VulkanCompute ${SOURCES})
set(TARGET_NAME VulkanCompute)
target_include_directories(VulkanCompute PRIVATE include)
set_property(TARGET VulkanCompute PROPERTY CXX_STANDARD 23)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
include(CheckIPOSupported)
check_ipo_supported(RESULT result OUTPUT output)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "" FORCE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    message("Build type set to Release")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_definitions(DEBUG)
    message("Build type set to Debug")
endif()

target_compile_definitions(VulkanCompute PUBLIC -DVK_API_VERSION=13)
if(MSVC)
  target_compile_options(${TARGET_NAME} PRIVATE /W4 /WX)
else()
  target_compile_options(${TARGET_NAME} PRIVATE -Wall -Wextra -Wpedantic)
endif()


find_package(Vulkan REQUIRED)
find_package(glslang REQUIRED)
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
find_package(VulkanMemoryAllocator CONFIG REQUIRED)
if(result)
    message(STATUS "Using LTO")
    set_property(TARGET VulkanCompute PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
else()
    message(WARNING "LTO is not supported: ${output}")
endif()


install(TARGETS ${PROJECT_NAME} DESTINATION bin)
target_precompile_headers(VulkanCompute PRIVATE include/hack.hpp)
target_link_libraries(VulkanCompute PRIVATE SPIRV glslang Vulkan::Vulkan GPUOpen::VulkanMemoryAllocator ${OpenCV_LIBS})
