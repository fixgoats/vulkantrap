#version 440

const float PI = 3.14159265359; // Universal constants
const float hbar = 6.582119569e-1;
const float invhbar = 1 / hbar;
const float muB = 5.7883818060e-2;
layout(constant_id = 0) const uint NELEMENTSX = 2; // spec constants set to
// ridiculous values to
// ensure they are
// overwritten in main
layout(constant_id = 1) const uint NELEMENTSY = 2;
layout(constant_id = 2) const uint NELEMENTSZ = 2;
layout(constant_id = 3) const uint XGROUPSIZE = 1;
layout(constant_id = 4) const uint YGROUPSIZE = 1;
layout(local_size_x_id = 3, local_size_y_id = 4, local_size_z = 1) in;
layout(constant_id = 5) const float xstart = 100000.;
layout(constant_id = 6) const float xend = 100000.1;
const float dt = 0.01;

const vec2 I = vec2(0, 1);

layout(std430, set = 0, binding = 0) buffer system {
  vec4 data[NELEMENTSX * NELEMENTSY];
};

vec2 cmul(vec2 a, vec2 b) {
  return vec2((a.x * b.x) - (a.y * b.y), (a.x * b.y) + (a.y * b.x));
}

vec4 cmul(vec2 a, vec4 b) { return vec4(cmul(a, b.xy), cmul(a, b.zw)); }

vec4 cmul(vec4 a, vec4 b) { return vec4(cmul(a.xy, b.xy), cmul(a.zw, b.zw)); }

vec2 conj(vec2 v) { return vec2(v.x, -v.y); }

vec2 cinv(vec2 v) { return vec2(conj(v) / dot(v, v)); }

vec4 f(vec4 y, float x) {
  vec4 factor = vec4(1 - (dot(y.xy, y.xy) + 2 * dot(y.zw, y.zw)),
                     -x * (dot(y.xy, y.xy) + 2 * dot(y.zw, y.zw)),
                     1 - (dot(y.zw, y.zw) + 2 * dot(y.xy, y.xy)),
                     -x * (dot(y.zw, y.zw) + 2 * dot(y.xy, y.xy)));
  return cmul(y, factor);
}

vec4 RK4step(vec4 y, float x) {
  vec4 k1 = f(y, x);
  vec4 k2 = f(y + (0.5 * dt) * k1, x);
  vec4 k3 = f(y + (0.5 * dt) * k2, x);
  vec4 k4 = f(y + dt * k3, x);
  return y + dt * (1. / 6.) * (k1 + (2 * k2) + (2 * k3) + k4);
}

void main() {
  uint i = gl_GlobalInvocationID.x;

  vec4 tmp = data[i];
  float dx = (xend - xstart) / float(NELEMENTSX);
  float x = xstart + i * dx;
  data[i] = RK4step(tmp, x);
}
